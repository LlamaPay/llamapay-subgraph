type LlamaPayFactory @entity {
  id: ID!
  count: Int! #Amount of LlamaPay contracts
  address: Bytes!
  contracts: [LlamaPayContract!]! @derivedFrom(field: "factory")
  createdTimestamp: BigInt!
  createdBlock: BigInt!
}

type LlamaPayContract @entity {
  id: ID!
  address: Bytes!
  factory: LlamaPayFactory!
  token: Bytes!
  streams: [Stream!]! @derivedFrom(field: "contract")
  createdTimestamp: BigInt!
  createdBlock: BigInt!
}

type Stream @entity {
  id: ID!
  streamId: Bytes!
  contract: LlamaPayContract!
  payer: User!
  payee: User!
  token: Bytes!
  amountPerSec: BigInt!
  active: Boolean!
  historicalEvents: [HistoryEvent!]! @derivedFrom(field: "stream")
  createdTimestamp: BigInt!
  createdBlock: BigInt!
}

type User @entity {
  id: ID!
  address: Bytes!
  streamsAsPayer: [Stream!]! @derivedFrom(field: "payer")
  streamsAsPayee: [Stream!]! @derivedFrom(field: "payee")
  historicalEvents: [HistoryEvent!]! @derivedFrom(field: "users")
  createdTimestamp: BigInt!
  createdBlock: BigInt!
}

type HistoryEvent @entity {
  id: ID!
  eventType: String!
  users: [User!]!
  stream: Stream!
  oldStream: Stream # If event is modified stream, then stores the old stream 
  createdTimestamp: BigInt!
  createdBlock: BigInt!
}
